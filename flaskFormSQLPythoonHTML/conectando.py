import sqlite3
import app
def defPrueba():
    nombre = app.request.form.get("nombre")
    print("conectando"+nombre)

try:
    #CREO MI CONEXION CON PONER EL NOMBRE DE LA BD YA ME LA CREA
    mi_conexion = sqlite3.connect("C:/Users/Usuario/Documents/galacticos/SQLpyHTML/prueba1")
    cursor = mi_conexion.cursor()
    #CREO MIS TABLAS
    #cursor.execute("CREATE TABLE PROVEEDORES (ID_PROVEEDOR INTEGER NOT NULL, NOMBRE_EMPRESA VARCHAR(40) NOT NULL, CELULAR CHAR(9) NOT NULL, TELEFONO CHAR(8), CONTACTO VARCHAR(40), RAZON_SOCIAL VARCHAR(40) NOT NULL, RUT CHAR(14), CONSTRAINT PK_PROVEEDOR PRIMARY KEY (ID_PROVEEDOR));")
    #cursor.execute("CREATE TABLE EMPLEADO (ID_EMPLEADO INTEGER NOT NULL, NOMBREAPELLIDO VARCHAR(40),FEC_NAC DATE, DOCUMENTO CHAR(8), DOMICILIO VARCHAR(50), PRESTADOR_SALUD VARCHAR(30), CARGO VARCHAR(20), CONSTRAINT PK_ID_EMPLEADO PRIMARY KEY (ID_EMPLEADO)); ")
    #cursor.execute("CREATE TABLE PRODUCTO (ID_PRODUCTO INTEGER NOT NULL, NOMBRE_PRODUCTO VARCHAR(30) NOT NULL, MARCA_PRODUCTO VARCHAR(30) NOT NULL, PRECIO NUMBER NOT NULL, STOCK INTEGER NOT NULL,DESCRIPCION_STOCK VARCHAR(40), PESO NUMBER, VOLUMEN NUMBER, ENVASE VARCHAR(25), VENCIMIENTO DATE,PROMO BOOLEAN, PROVEEDOR_PRO INTEGER, CONSTRAINT PK_ID_PRODUCTO PRIMARY KEY (ID_PRODUCTO),CONSTRAINT UK_NOMBRE UNIQUE (NOMBRE_PRODUCTO), CONSTRAINT FK_PROVEEDOR FOREIGN KEY (PROVEEDOR_PRO) REFERENCES PREOVEEDOR(ID_PROVEEDOR));") 
    #cursor.execute("CREATE TABLE CLIENTE (ID_CLIENTE INTEGER NOT NULL, CI CHAR(8), NOMBRE VARCHAR(40),PREMIUM BOOLEAN, COMPRA INTEGER, CONSTRAINT PK_ID_CLIENTE PRIMARY KEY (ID_CLIENTE), CONSTRAINT FK_COMPRA FOREIGN KEY (COMPRA) REFERENCES VENTA(ID_VENTA));")
    #cursor.execute("CREATE TABLE VENTA (ID_VENTA INTEGER NOT NULL, PRODUCTO_A INTEGER, CANTIDAD_PRO_A NUMBER, PRODUCTO_B INTEGER, CANTIDAD_PRO_B NUMBER, PRODUCTO_C INTEGER, CANTIDAD_PRO_C NUMBER, PRODUCTO_D INTEGER, CANTIDAD_PRO_D NUMBER, PRODUCTO_E INTEGER, CANTIDAD_PRO_E NUMBER, PRODUCTO_F INTEGER, CANTIDAD_PRO_F NUMBER, PRODUCTO_G INTEGER, CANTIDAD_PRO_G NUMBER, PRODUCTO_H INTEGER, CANTIDAD_PRO_H NUMBER, CLIENTE_COMPRA INTEGER, DESCRIPCION VARCHAR(20), COSTO_TOTAL NUMBER, CONSTRAINT PK_VENTA PRIMARY KEY (ID_VENTA), CONSTRAINT FK_CLIENTE FOREIGN KEY (CLIENTE_COMPRA) REFERENCES CLIENTE(ID_CLIENTE), CONSTRAINT FK_PRODUCTO_A FOREIGN KEY (PRODUCTO_A) REFERENCES PRODUCTO(ID_PRODUCTO), CONSTRAINT FK_PRODUCTOB FOREIGN KEY (PRODUCTO_B) REFERENCES PRODUCTO(ID_PRODUCTO), CONSTRAINT FK_PRODUCTOC FOREIGN KEY (PRODUCTO_C) REFERENCES PRODUCTO(ID_PRODUCTO), CONSTRAINT FK_PRODUCTOD FOREIGN KEY (PRODUCTO_D) REFERENCES PRODUCTO(ID_PRODUCTO), CONSTRAINT FK_PRODUCTOE FOREIGN KEY (PRODUCTO_E) REFERENCES PRODUCTO(ID_PRODUCTO), CONSTRAINT FK_PRODUCTOF FOREIGN KEY (PRODUCTO_F) REFERENCES PRODUCTO(ID_PRODUCTO), CONSTRAINT FK_PRODUCTOG FOREIGN KEY (PRODUCTO_G) REFERENCES PRODUCTO(ID_PRODUCTO), CONSTRAINT FK_PRODUCTOH FOREIGN KEY (PRODUCTO_H) REFERENCES PRODUCTO(ID_PRODUCTO)); ") 
    cursor.execute("CREATE TABLE probando1 (ID_prueba INTEGER )")
    nombre = app.request.form.get("nombre")
    print("conectando"+nombre)
    cursor.execute("INSERT INTO probando1 VALUES ("+nombre+")")

    mi_conexion.commit()
    mi_conexion.close()
    
except Exception as ex:
    print( ex ) 



"""
def insert_proveedores():
    try:
        mi_conexion.execute("INSERT IN TO VALUE() ")
         

    except Exception as ex:
        print( ex)    

def insert_empleado():
    try:
        mi_conexion.execute("INSERT IN TO VALUE() ")
         

    except Exception as ex:
        print( ex)    

def insert_producto():
    try:
        mi_conexion.execute("INSERT IN TO VALUE() ")
         

    except Exception as ex:
        print( ex) 


def insert_cliente():
    try:
        mi_conexion.execute("INSERT IN TO VALUE() ")
         

    except Exception as ex:
        print( ex)    

def insert_venta():
    try:
        mi_conexion.execute("INSERT IN TO VALUE() ")
         

    except Exception as ex:
        print( ex)    
   


def delete_bd():
    try:
        mi_conexion.execute("DELETE FROM TABLA WHERE ID=3")

    except Exception as ex:
        print (ex)

"""

